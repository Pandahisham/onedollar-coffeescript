// Generated by CoffeeScript 1.6.1
(function() {

  window.OneDollar = (function() {
    var Vector, typeIsArray;

    Vector = (function() {

      function Vector(x, y) {
        this.x = x != null ? x : 0;
        this.y = y != null ? y : 0;
      }

      Vector.prototype.dist = function(vector) {
        return Math.sqrt(Math.pow(this.x - this.y, 2) + Math.pow(vector.x - vector.y, 2));
      };

      Vector.prototype.add = function(vector) {
        this.x += vector.x;
        this.y += vector.y;
        return this;
      };

      Vector.prototype.div = function(number) {
        this.x /= number;
        this.y /= number;
        return this;
      };

      return Vector;

    })();

    function OneDollar(fragmentation, size, angle, step) {
      this.fragmentation = fragmentation != null ? fragmentation : 64;
      this.size = size != null ? size : 250;
      this.angle = angle != null ? angle : 45;
      this.step = step != null ? step : 3;
      this.PI = Math.PI;
      this.HALFDIAGONAL = 0.5 * Math.sqrt(this.size * this.size + this.size * this.size);
      this.templates = {};
    }

    OneDollar.prototype.learn = function(name, points) {
      if (this._validate(points)) {
        points = this._transform(points);
        return this.templates[name] = points;
      }
    };

    OneDollar.prototype.check = function(points) {
      if (this._validate(points)) {
        return points = this._transform(points);
      }
    };

    OneDollar.prototype._validate = function(points) {
      if (typeIsArray(points)) {
        if (points.length % 2 === 0 && points.length > 0) {
          return true;
        }
      }
      return false;
    };

    OneDollar.prototype._transform = function(points) {
      points = this.__convert(points);
      points = this.__resample(points);
      return points;
    };

    OneDollar.prototype.__convert = function(points) {
      var i, p, vectors, _i, _len;
      vectors = [];
      for (i = _i = 0, _len = points.length; _i < _len; i = _i += 2) {
        p = points[i];
        vectors.push(new Vector(points[i], points[i + 1]));
      }
      return vectors;
    };

    OneDollar.prototype.__resample = function(points) {
      var seperator;
      console.log('__resample');
      seperator = (this.___length(points)) / (this.fragmentation - 1);
      return points;
    };

    OneDollar.prototype.__rotateToZero = function(points) {
      console.log('__rotateToZero');
      return points;
    };

    OneDollar.prototype.__scaleToSquare = function(points) {
      console.log('__scaleToSquare');
      return points;
    };

    OneDollar.prototype.__translateToOrigin = function(points) {
      console.log('__translateToOrigin');
      return points;
    };

    OneDollar.prototype.___centroid = function(points) {
      var centroid, p, _i, _len;
      centroid = new Vector;
      for (_i = 0, _len = points.length; _i < _len; _i++) {
        p = points[_i];
        centroid.add(p);
      }
      centroid.div(points.length);
      return centroid;
    };

    OneDollar.prototype.___length = function(points) {
      var length, p, tmp, _i, _len;
      length = 0;
      tmp = null;
      for (_i = 0, _len = points.length; _i < _len; _i++) {
        p = points[_i];
        if (tmp !== null) {
          length += p.dist(tmp);
        }
        tmp = p;
      }
      return length;
    };

    typeIsArray = Array.isArray || function(value) {
      return {}.toString.call(value) === '[object Array]';
    };

    return OneDollar;

  })();

}).call(this);
