// Generated by CoffeeScript 1.6.1
(function() {

  window.OneDollar = (function() {
    var Vector;

    Vector = (function() {

      function Vector(x, y) {
        this.x = x != null ? x : 0.0;
        this.y = y != null ? y : 0.0;
      }

      Vector.prototype.dist = function(vector) {
        return Math.sqrt(Math.pow(this.x - vector.x, 2) + Math.pow(this.y - vector.y, 2));
      };

      Vector.prototype.add = function(vector) {
        this.x += vector.x;
        this.y += vector.y;
        return this;
      };

      Vector.prototype.div = function(number) {
        this.x /= number;
        this.y /= number;
        return this;
      };

      return Vector;

    })();

    function OneDollar(fragmentation, size, angle, step) {
      this.fragmentation = fragmentation != null ? fragmentation : 64;
      this.size = size != null ? size : 250;
      this.angle = angle != null ? angle : 45;
      this.step = step != null ? step : 3;
      this.PI = Math.PI;
      this.HALFDIAGONAL = 0.5 * Math.sqrt(this.size * this.size + this.size * this.size);
      this.templates = {};
    }

    OneDollar.prototype.learn = function(name, points) {
      if (points.length > 0) {
        points = this._transform(points);
        return this.templates[name] = points;
      }
    };

    OneDollar.prototype.check = function(points) {
      if (points.length > 0) {
        points = this._transform(points);
        return points;
      }
    };

    OneDollar.prototype._transform = function(points) {
      points = this.__convert(points);
      points = this.__resample(points);
      points = this.__rotateToZero(points);
      return points;
    };

    OneDollar.prototype.__convert = function(points) {
      var point, vectors, _i, _len;
      vectors = [];
      for (_i = 0, _len = points.length; _i < _len; _i++) {
        point = points[_i];
        vectors.push(new Vector(point[0], point[1]));
      }
      return vectors;
    };

    OneDollar.prototype.__resample = function(points) {
      var distance, i, point, prev, result, seperator, space, vector, _i, _ref, _ref1;
      console.log('__resample');
      seperator = (this.___length(points)) / (this.fragmentation - 1);
      distance = 0;
      result = [];
      while (points.length !== 0) {
        prev = points.pop();
        if (result.length === 0) {
          result.push(prev);
        } else {
          if (points.length === 0) {
            result.push(prev);
            break;
          }
          point = points[points.length - 1];
          space = prev.dist(point);
          if ((distance + space) >= seperator) {
            vector = new Vector(prev.x + ((seperator - distance) / space) * (point.x - prev.x), prev.y + ((seperator - distance) / space) * (point.y - prev.y));
            result.push(vector);
            points.push(vector);
            distance = 0;
            if (result.length === (this.fragmentation - 1)) {
              result.push(points[points.length - 1]);
              break;
            }
          } else {
            distance += space;
          }
        }
      }
      if (result.length !== this.fragmentation) {
        point = result[result.length - 1];
        for (i = _i = _ref = result.length, _ref1 = this.fragmentation; _ref <= _ref1 ? _i < _ref1 : _i > _ref1; i = _ref <= _ref1 ? ++_i : --_i) {
          result.push(point);
        }
      }
      return result;
    };

    OneDollar.prototype.__rotateToZero = function(points) {
      var centroid, theta;
      console.log('__rotateToZero');
      centroid = this.___centroid(points);
      theta = Math.atan2(centroid.y - points[0].y, centroid.x - points[0].x);
      return this.___rotateByValue(points, theta, centroid);
    };

    OneDollar.prototype.__scaleToSquare = function(points) {
      console.log('__scaleToSquare');
      return points;
    };

    OneDollar.prototype.__translateToOrigin = function(points) {
      console.log('__translateToOrigin');
      return points;
    };

    OneDollar.prototype.___rotateByValue = function(points, radian, centroid) {
      var cos, i, point, sin, x, y, _i, _len;
      sin = Math.sin(radian);
      cos = Math.cos(radian);
      for (i = _i = 0, _len = points.length; _i < _len; i = ++_i) {
        point = points[i];
        x = (point.x - centroid.x) * cos - (point.y - centroid.y) * sin + centroid.x;
        y = (point.x - centroid.x) * sin + (point.y - centroid.y) * cos + centroid.y;
        points[i] = new Vector(x, y);
      }
      return points;
    };

    OneDollar.prototype.___centroid = function(points) {
      var centroid, p, _i, _len;
      centroid = new Vector;
      for (_i = 0, _len = points.length; _i < _len; _i++) {
        p = points[_i];
        centroid.add(p);
      }
      centroid.div(points.length);
      return centroid;
    };

    OneDollar.prototype.___length = function(points) {
      var length, p, tmp, _i, _len;
      length = 0.0;
      tmp = null;
      for (_i = 0, _len = points.length; _i < _len; _i++) {
        p = points[_i];
        console.log(p.x, p.y);
        if (tmp !== null) {
          length += p.dist(tmp);
        }
        tmp = p;
      }
      console.log('=', length);
      return length;
    };

    return OneDollar;

  })();

}).call(this);
